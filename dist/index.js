"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = require("fs");

var _path = _interopRequireDefault(require("path"));

var _cheerio = _interopRequireDefault(require("cheerio"));

var _axios = _interopRequireDefault(require("axios"));

var _debug = _interopRequireDefault(require("debug"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug.default)('page-loader');

const loader = async (url, directory) => {
  const cwd = process.cwd();
  const fileName = (0, _utils.formatUrl)(url);

  const filePath = _path.default.join(directory, fileName);

  const fileDirectoryUrl = (0, _utils.makeFileDirectoryUrl)(filePath);
  const urlObj = new URL(url);
  const {
    hostname,
    origin
  } = urlObj;
  const pageData = await (0, _utils.get)(url);

  const $ = _cheerio.default.load(pageData, {
    decodeEntities: false
  });

  const imagesLinks = [];
  $('img').toArray().forEach(element => {
    const {
      src
    } = element.attribs;

    if (!src) {
      return;
    }

    if (src.startsWith('http')) {
      const srcObj = new URL(src);
      const {
        hostname: srcHostName
      } = srcObj;

      if (srcHostName === hostname) {
        imagesLinks.push(src);
        const newSrc = (0, _utils.makeAssetUrl)(src, fileDirectoryUrl, url);
        element.attribs.src = newSrc;
      }
    }

    if (!src.startsWith('http') && src.startsWith('/')) {
      const newSrc = (0, _utils.makeAssetUrl)(src, fileDirectoryUrl, url);
      element.attribs.src = newSrc;

      const absolutePath = _path.default.join(origin, src);

      imagesLinks.push(absolutePath);
    }
  });
  $('link').toArray().forEach(element => {
    const {
      href
    } = element.attribs;

    if (!href) {
      return;
    }

    if (href.startsWith('http')) {
      const hrefObj = new URL(href);
      const {
        hostname: hrefHostName
      } = hrefObj;

      if (hrefHostName === hostname) {
        const newHref = (0, _utils.makeAssetUrl)(href, fileDirectoryUrl, url);
        element.attribs.href = newHref;
      }
    }

    if (!href.startsWith('http')) {
      const newHref = (0, _utils.makeAssetUrl)(href, fileDirectoryUrl, url);
      element.attribs.href = newHref;
    }
  });
  log('images urls:', imagesLinks);
  $('script').toArray().forEach(element => {
    const {
      src
    } = element.attribs;

    if (!src) {
      return;
    }

    if (src.startsWith('http')) {
      const srcObj = new URL(src);
      const {
        hostname: srcHostName
      } = srcObj;

      if (srcHostName === hostname) {
        const newSrc = (0, _utils.makeAssetUrl)(src, fileDirectoryUrl, url);
        element.attribs.src = newSrc;
      }
    }

    if (!src.startsWith('http')) {
      const newSrc = (0, _utils.makeAssetUrl)(src, fileDirectoryUrl, url);
      element.attribs.src = newSrc;
    }
  });
  const processedData = $.html();

  if (directory !== cwd) {
    try {
      _fs.promises.mkdir(directory);
    } catch (error) {
      console.error(error);
    }
  }

  if ((0, _utils.hasAssets)(imagesLinks)) {
    _fs.promises.mkdir(fileDirectoryUrl);

    const requestImages = imagesLinks.map(url => _axios.default.get(url, {
      responseType: 'arraybuffer'
    }).then(({
      data
    }) => data));
    const processedImagesUrls = imagesLinks.map(link => (0, _utils.makeAssetUrl)(link, fileDirectoryUrl, url));
    Promise.all(requestImages).then(responses => {
      responses.forEach((response, index) => {
        _fs.promises.writeFile(processedImagesUrls[index], response);
      });
    }).catch(err => {
      console.error(err);
    });
  }

  try {
    _fs.promises.writeFile(filePath, processedData);
  } catch (error) {
    console.error(error);
  }

  return filePath;
};

var _default = loader;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,