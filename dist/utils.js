"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasAssets = exports.makeAssetUrl = exports.makeFileDirectoryUrl = exports.get = exports.formatUrl = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _cheerio = _interopRequireDefault(require("cheerio"));

var _fs = require("fs");

var _path = _interopRequireDefault(require("path"));

var _debug = _interopRequireDefault(require("debug"));

require("axios-debug-log");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _debug.default)('page-loader');

const formatUrl = url => {
  const urlObj = new URL(url);
  const {
    hostname,
    pathname
  } = urlObj;
  const stringifyedUrl = `${hostname}${pathname}`;
  const separators = new RegExp('\\W');
  const splitted = stringifyedUrl.split(separators);
  const joined = splitted.join('-');
  const formatted = `${joined}.html`;
  log('Formatted url:', formatted);
  return formatted;
};

exports.formatUrl = formatUrl;

const get = url => _axios.default.get(url).then(response => response.data).then(data => data).catch((debug, err) => debug('Error:', err.message));

exports.get = get;

const makeFileDirectoryUrl = fileName => {
  const splittedUrl = fileName.split('.');
  const fileDirectoryUrl = `${splittedUrl[0]}_files`;
  return fileDirectoryUrl;
};

exports.makeFileDirectoryUrl = makeFileDirectoryUrl;

const makeAssetUrl = (assetUrl, directoryPath, requestUrl) => {
  if (!assetUrl) {
    return;
  }

  if (assetUrl.startsWith('http')) {
    const urlObj = new URL(assetUrl);
    const {
      hostname,
      pathname
    } = urlObj;
    const stringifyedUrl = `${hostname}${pathname}`;
    const separators = new RegExp('\\W');
    const splitted = stringifyedUrl.split(separators);
    const fileExt = splitted.pop();
    const joined = splitted.join('-');
    const result = `${directoryPath}/${joined}.${fileExt}`;
    log('Asset URL:', result);
    return result;
  }

  const requestUrlObj = new URL(requestUrl);
  const {
    origin
  } = requestUrlObj;

  const absoluteImageUrl = _path.default.join(origin, assetUrl);

  const urlObj = new URL(absoluteImageUrl);
  const {
    hostname,
    pathname
  } = urlObj;
  const stringifyedUrl = `${hostname}${pathname}`;
  const separators = new RegExp('\\W');
  const splitted = stringifyedUrl.split(separators);
  const fileExt = splitted.pop();
  const joined = splitted.join('-');
  const result = `${directoryPath}/${joined}.${fileExt}`;
  log('Asset URL:', result);
  return result;
};

exports.makeAssetUrl = makeAssetUrl;

const hasAssets = images => images.length > 0;

exports.hasAssets = hasAssets;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJsb2ciLCJmb3JtYXRVcmwiLCJ1cmwiLCJ1cmxPYmoiLCJVUkwiLCJob3N0bmFtZSIsInBhdGhuYW1lIiwic3RyaW5naWZ5ZWRVcmwiLCJzZXBhcmF0b3JzIiwiUmVnRXhwIiwic3BsaXR0ZWQiLCJzcGxpdCIsImpvaW5lZCIsImpvaW4iLCJmb3JtYXR0ZWQiLCJnZXQiLCJheGlvcyIsInRoZW4iLCJyZXNwb25zZSIsImRhdGEiLCJjYXRjaCIsImRlYnVnIiwiZXJyIiwibWVzc2FnZSIsIm1ha2VGaWxlRGlyZWN0b3J5VXJsIiwiZmlsZU5hbWUiLCJzcGxpdHRlZFVybCIsImZpbGVEaXJlY3RvcnlVcmwiLCJtYWtlQXNzZXRVcmwiLCJhc3NldFVybCIsImRpcmVjdG9yeVBhdGgiLCJyZXF1ZXN0VXJsIiwic3RhcnRzV2l0aCIsImZpbGVFeHQiLCJwb3AiLCJyZXN1bHQiLCJyZXF1ZXN0VXJsT2JqIiwib3JpZ2luIiwiYWJzb2x1dGVJbWFnZVVybCIsInBhdGgiLCJoYXNBc3NldHMiLCJpbWFnZXMiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLEdBQUcsR0FBRyxvQkFBTSxhQUFOLENBQVo7O0FBRU8sTUFBTUMsU0FBUyxHQUFJQyxHQUFELElBQVM7QUFDaEMsUUFBTUMsTUFBTSxHQUFHLElBQUlDLEdBQUosQ0FBUUYsR0FBUixDQUFmO0FBQ0EsUUFBTTtBQUFFRyxJQUFBQSxRQUFGO0FBQVlDLElBQUFBO0FBQVosTUFBeUJILE1BQS9CO0FBQ0EsUUFBTUksY0FBYyxHQUFJLEdBQUVGLFFBQVMsR0FBRUMsUUFBUyxFQUE5QztBQUNBLFFBQU1FLFVBQVUsR0FBRyxJQUFJQyxNQUFKLENBQVcsS0FBWCxDQUFuQjtBQUNBLFFBQU1DLFFBQVEsR0FBR0gsY0FBYyxDQUFDSSxLQUFmLENBQXFCSCxVQUFyQixDQUFqQjtB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LEVBQXJEO0FBQ0FqQyxFQUFBQSxHQUFHLENBQUMsWUFBRCxFQUFlbUMsTUFBZixDQUFIO0FBRUEsU0FBT0EsTUFBUDtBQUNELENBaENNOzs7O0FBa0NBLE1BQU1LLFNBQVMsR0FBSUMsTUFBRCxJQUFZQSxNQUFNLENBQUNDLE1BQVAsR0FBZ0IsQ0FBOUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IGNoZWVyaW8gZnJvbSAnY2hlZXJpbyc7XG5pbXBvcnQgeyBwcm9taXNlcyBhcyBmcyB9IGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCAnYXhpb3MtZGVidWctbG9nJztcblxuY29uc3QgbG9nID0gZGVidWcoJ3BhZ2UtbG9hZGVyJyk7XG5cbmV4cG9ydCBjb25zdCBmb3JtYXRVcmwgPSAodXJsKSA9PiB7XG4gIGNvbnN0IHVybE9iaiA9IG5ldyBVUkwodXJsKTtcbiAgY29uc3QgeyBob3N0bmFtZSwgcGF0aG5hbWUgfSA9IHVybE9iajtcbiAgY29uc3Qgc3RyaW5naWZ5ZWRVcmwgPSBgJHtob3N0bmFtZX0ke3BhdGhuYW1lfWA7XG4gIGNvbnN0IHNlcGFyYXRvcnMgPSBuZXcgUmVnRXhwKCdcXFxcVycpO1xuICBjb25zdCBzcGxpdHRlZCA9IHN0cmluZ2lmeWVkVXJsLnNwbGl0KHNlcGFyYXRvcnMpO1xuICBjb25zdCBqb2luZWQgPSBzcGxpdHRlZC5qb2luKCctJyk7XG4gIGNvbnN0IGZvcm1hdHRlZCA9IGAke2pvaW5lZH0uaHRtbGA7XG4gIGxvZygnRm9ybWF0dGVkIHVybDonLCBmb3JtYXR0ZWQpO1xuXG4gIHJldHVybiBmb3JtYXR0ZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0ID0gKHVybCkgPT4gYXhpb3MuZ2V0KHVybClcbiAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5kYXRhKVxuICAudGhlbigoZGF0YSkgPT4gZGF0YSlcbiAgLmNhdGNoKChkZWJ1ZywgZXJyKSA9PiBkZWJ1ZygnRXJyb3I6JywgZXJyLm1lc3NhZ2UpKTtcblxuZXhwb3J0IGNvbnN0IG1ha2VGaWxlRGlyZWN0b3J5VXJsID0gKGZpbGVOYW1lKSA9PiB7XG4gIGNvbnN0IHNwbGl0dGVkVXJsID0gZmlsZU5hbWUuc3BsaXQoJy4nKTtcbiAgY29uc3QgZmlsZURpcmVjdG9yeVVybCA9IGAke3NwbGl0dGVkVXJsWzBdfV9maWxlc2A7XG5cbiAgcmV0dXJuIGZpbGVEaXJlY3RvcnlVcmw7XG59O1xuXG5leHBvcnQgY29uc3QgbWFrZUFzc2V0VXJsID0gKGFzc2V0VXJsLCBkaXJlY3RvcnlQYXRoLCByZXF1ZXN0VXJsKSA9PiB7XG4gIGlmICghYXNzZXRVcmwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoYXNzZXRVcmwuc3RhcnRzV2l0aCgnaHR0cCcpKSB7XG4gICAgY29uc3QgdXJsT2JqID0gbmV3IFVSTChhc3NldFVybCk7XG4gICAgY29uc3QgeyBob3N0bmFtZSwgcGF0aG5hbWUgfSA9IHVybE9iajtcbiAgICBjb25zdCBzdHJpbmdpZnllZFVybCA9IGAke2hvc3RuYW1lfSR7cGF0aG5hbWV9YDtcbiAgICBjb25zdCBzZXBhcmF0b3JzID0gbmV3IFJlZ0V4cCgnXFxcXFcnKTtcbiAgICBjb25zdCBzcGxpdHRlZCA9IHN0cmluZ2lmeWVkVXJsLnNwbGl0KHNlcGFyYXRvcnMpO1xuICAgIGNvbnN0IGZpbGVFeHQgPSBzcGxpdHRlZC5wb3AoKTtcbiAgICBjb25zdCBqb2luZWQgPSBzcGxpdHRlZC5qb2luKCctJyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYCR7ZGlyZWN0b3J5UGF0aH0vJHtqb2luZWR9LiR7ZmlsZUV4dH1gO1xuICAgIGxvZygnQXNzZXQgVVJMOicsIHJlc3VsdCk7XG4gIFxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgY29uc3QgcmVxdWVzdFVybE9iaiA9IG5ldyBVUkwocmVxdWVzdFVybCk7XG4gIGNvbnN0IHsgb3JpZ2luIH0gPSByZXF1ZXN0VXJsT2JqO1xuICBjb25zdCBhYnNvbHV0ZUltYWdlVXJsID0gcGF0aC5qb2luKG9yaWdpbiwgYXNzZXRVcmwpO1xuICBjb25zdCB1cmxPYmogPSBuZXcgVVJMKGFic29sdXRlSW1hZ2VVcmwpO1xuICBjb25zdCB7IGhvc3RuYW1lLCBwYXRobmFtZSB9ID0gdXJsT2JqO1xuICBjb25zdCBzdHJpbmdpZnllZFVybCA9IGAke2hvc3RuYW1lfSR7cGF0aG5hbWV9YDtcbiAgY29uc3Qgc2VwYXJhdG9ycyA9IG5ldyBSZWdFeHAoJ1xcXFxXJyk7XG4gIGNvbnN0IHNwbGl0dGVkID0gc3RyaW5naWZ5ZWRVcmwuc3BsaXQoc2VwYXJhdG9ycyk7XG4gIGNvbnN0IGZpbGVFeHQgPSBzcGxpdHRlZC5wb3AoKTtcbiAgY29uc3Qgam9pbmVkID0gc3BsaXR0ZWQuam9pbignLScpO1xuICBjb25zdCByZXN1bHQgPSBgJHtkaXJlY3RvcnlQYXRofS8ke2pvaW5lZH0uJHtmaWxlRXh0fWA7XG4gIGxvZygnQXNzZXQgVVJMOicsIHJlc3VsdCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBoYXNBc3NldHMgPSAoaW1hZ2VzKSA9PiBpbWFnZXMubGVuZ3RoID4gMDtcbiJdfQ==